@page "/restaurants"
@using System.Text.Json
@using System.Text.Json.Serialization;
@inject IHttpClientFactory ClientFactory

<h1>Get all Restaurants</h1>

@if (getRestaurantsError)
{
  <p>Unable to get Restaurants from API. Please try again later.</p>
}
else
{
  <ul>
  @foreach (var restaurant in restaurants)
    {
      <li>
        @restaurant.Name
        @restaurant.Id
        @restaurant.Menu
        @restaurant.Description
      </li>
    }
  </ul>
}

@code {
  private IEnumerable<Restaurants> restaurants = Array.Empty<Restaurants>();
  private bool getRestaurantsError;
  private bool shouldRender;
  protected override bool ShouldRender() => shouldRender;

  protected override async Task OnInitializedAsync()
  {
    var request = new HttpRequestMessage(HttpMethod.Get,
    "http://localhost:4000/api/Restaurants");
    request.Headers.Add("Accept", "application/json");
    request.Headers.Add("Accept", "text/plain");
    request.Headers.Add("User-Agent", "HttpClientFactory-Sample");

    var client = ClientFactory.CreateClient();

    var response = await client.SendAsync(request);

    if (response.IsSuccessStatusCode)
    {
      using var responseStream = await response.Content.ReadAsStreamAsync();
      restaurants = await JsonSerializer.DeserializeAsync
      <IEnumerable<Restaurants>>(responseStream);
    }
    else
    {
      getRestaurantsError = true;
    }

    shouldRender = true;
  }

  public class Restaurants
  {
    [JsonPropertyName("name")]
    public string Name { get; set; }
    [JsonPropertyName("id")]

    public string Id { get; set; }
    [JsonPropertyName("description")]
    public string Description { get; set; }
    [JsonPropertyName("menu")]
    public string Menu { get; set; }
  }
}
