@page "/restaurants"
@using System;
@using System.Diagnostics;
@using System.Text;
@using System.Text.Json
@using System.Text.Json.Serialization;
@using System.Threading;
@using Newtonsoft.Json;

@using Client.Data;
@inject HttpClient Http

<h1>Get all Restaurants</h1>

@if (loading == true)
{
  <div>
  <h2>Loading...</h2>
</div>
}
else
{
  <ul>
  @foreach (var restaurant in restaurants)
    {
      <li>
        @restaurant.Name -
        @restaurant.Description -
        (@restaurant.Id)
      </li>
    }
  </ul>

  <div class="container">
    <EditForm Name="NewRestaurantForm" Model="@newRestaurant" OnValidSubmit="@HandleValidSubmit"
    OnInvalidSubmit="@HandleInvalidSubmit">
      <DataAnnotationsValidator />
      <label for="Name">Name</label>
      <InputText required="required" @bind-Value="@newRestaurant.Name" name="Name" id="name" />
      <label for="Description">Description</label>
      <InputText required="required" @bind-Value="@newRestaurant.Description" name="Description" id="Description" />
      <button type="submit" class="btn btn-block btn-primary">Submit</button>

      @if (displayValidationErrorMessages)
      {
        <ValidationSummary />
      }
    </EditForm>
  </div>
}

@code {
  private IEnumerable<Restaurant> restaurants = Array.Empty<Restaurant>();
  private bool loading;
  protected override async Task OnInitializedAsync()
  {
    await LoadAllRestaurants();
  }

  private async Task LoadAllRestaurants()
  {
    loading = true;
    restaurants = await Http.GetFromJsonAsync<IEnumerable<Restaurant>>("http://localhost:4000/api/Restaurants");
    loading = false;
  }

  Restaurant newRestaurant = new Restaurant();
  bool displayValidationErrorMessages = false;

  private async void HandleValidSubmit(EditContext context)
  {
    Console.WriteLine("Valid form submit"); // this logs to the browser console
    loading = true;
    displayValidationErrorMessages = false;
    var serialized = JsonConvert.SerializeObject(newRestaurant);
    var stringContent = new StringContent(serialized, Encoding.UTF8, "application/json");
    await Http.PostAsync("http://localhost:4000/api/Restaurants", stringContent);
    await LoadAllRestaurants();
    Console.WriteLine("After load all restaurants. leaving form submit func. loading: {0}", loading);
    // force blazor to re-render after loading new data
    StateHasChanged();
  }

  private void HandleInvalidSubmit(EditContext context)
  {
    displayValidationErrorMessages = true;
  }

}
